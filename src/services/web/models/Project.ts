/* tslint:disable */
/* eslint-disable */
/**
 * PaddleLabel API Specs
 * Web backend APIs for PaddleLabel
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Label } from './Label';
import { LabelFromJSON, LabelFromJSONTyped, LabelToJSON } from './Label';
import type { ProjectOtherSettings } from './ProjectOtherSettings';
import {
  ProjectOtherSettingsFromJSON,
  ProjectOtherSettingsFromJSONTyped,
  ProjectOtherSettingsToJSON,
} from './ProjectOtherSettings';
import type { TaskCategory } from './TaskCategory';
import {
  TaskCategoryFromJSON,
  TaskCategoryFromJSONTyped,
  TaskCategoryToJSON,
} from './TaskCategory';

/**
 * project info and settings
 * @export
 * @interface Project
 */
export interface Project {
  /**
   * project表的主键，从1开始
   * @type {number}
   * @memberof Project
   */
  readonly projectId?: number;
  /**
   * 项目名字
   * @type {string}
   * @memberof Project
   */
  name?: string;
  /**
   * Optional project description
   * @type {string}
   * @memberof Project
   */
  description?: string;
  /**
   * Absolute directory path where all the data file is stored
   * @type {string}
   * @memberof Project
   */
  dataDir?: string;
  /**
   * Top level annotation task category, see TODO for int <-> category map
   * @type {number}
   * @memberof Project
   */
  taskCategoryId?: number;
  /**
   *
   * @type {TaskCategory}
   * @memberof Project
   */
  taskCategory?: TaskCategory;
  /**
   *
   * @type {Array<Label>}
   * @memberof Project
   */
  labels?: Array<Label>;
  /**
   * Project creation timestamp in UTC
   * @type {string}
   * @memberof Project
   */
  readonly created?: string | null;
  /**
   * Last time the project detail or ANY TASK of the project is modified
   * @type {string}
   * @memberof Project
   */
  readonly modified?: string | null;
  /**
   * A string that is unique to each project
   * @type {string}
   * @memberof Project
   */
  upid?: string;
  /**
   *
   * @type {ProjectOtherSettings}
   * @memberof Project
   */
  otherSettings?: ProjectOtherSettings;
  /**
   * This property is only used for passing project create/export options around more easilly. It's discarded after the project is created or exported.
   * @type {object}
   * @memberof Project
   */
  allOptions?: object;
}

/**
 * Check if a given object implements the Project interface.
 */
export function instanceOfProject(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function ProjectFromJSON(json: any): Project {
  return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    projectId: !exists(json, 'project_id') ? undefined : json['project_id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    description: !exists(json, 'description') ? undefined : json['description'],
    dataDir: !exists(json, 'data_dir') ? undefined : json['data_dir'],
    taskCategoryId: !exists(json, 'task_category_id') ? undefined : json['task_category_id'],
    taskCategory: !exists(json, 'task_category')
      ? undefined
      : TaskCategoryFromJSON(json['task_category']),
    labels: !exists(json, 'labels') ? undefined : (json['labels'] as Array<any>).map(LabelFromJSON),
    created: !exists(json, 'created') ? undefined : json['created'],
    modified: !exists(json, 'modified') ? undefined : json['modified'],
    upid: !exists(json, 'upid') ? undefined : json['upid'],
    otherSettings: !exists(json, 'other_settings')
      ? undefined
      : ProjectOtherSettingsFromJSON(json['other_settings']),
    allOptions: !exists(json, 'all_options') ? undefined : json['all_options'],
  };
}

export function ProjectToJSON(value?: Project | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    data_dir: value.dataDir,
    task_category_id: value.taskCategoryId,
    task_category: TaskCategoryToJSON(value.taskCategory),
    labels: value.labels === undefined ? undefined : (value.labels as Array<any>).map(LabelToJSON),
    upid: value.upid,
    other_settings: ProjectOtherSettingsToJSON(value.otherSettings),
    all_options: value.allOptions,
  };
}
